---
- name: Configure repositories, check for updates, update any packages, and if required, reboot the VMs and server
  # Looks for hosts tagged with [proxmox]
  hosts: proxmox
  vars:
    pve_enterprise_repo: 'deb https://enterprise.proxmox.com/debian/pve bookworm pve-enterprise'
    pve_nosub_repo: 'deb http://download.proxmox.com/debian/pve bookworm pve-no-subscription'
    ceph_enterprise_repo: 'deb https://enterprise.proxmox.com/debian/ceph-quincy bookworm enterprise'
    ceph_nosub_repo: 'deb http://download.proxmox.com/debian/ceph-quincy bookworm no-subscription'
  tasks:

    # This will remove the license-only repository (/etc/apt/sources.list)
    # Have to use update_cache no or it will run 'apt update', thus failing with 401 unauthorized with the ceph repo still configured
    - name: Removing the license-only repository on {{ inventory_hostname }}
      apt_repository:
        repo: '{{ pve_enterprise_repo }}'
        state: absent
        update_cache: false

    # Same step, except for Ceph repositories
    - name: Removing the license-only Ceph repository on {{ inventory_hostname }}
      apt_repository:
        repo: '{{ ceph_enterprise_repo }}'
        state: absent
        update_cache: false

    # Now we can add in our free repository for PVE specific updates
    - name: Adding the ProxMox free repository
      ansible.builtin.apt_repository:
        repo: '{{ pve_nosub_repo }}'
        state: present
        update_cache: false

    # Same step, except for Ceph
    - name: Adding the Ceph free repository
      ansible.builtin.apt_repository:
        repo: '{{ ceph_nosub_repo }}'
        state: present
        update_cache: false

    # This task is equivalent to 'apt update', thus fetches new packages available from our respositories
    - name: Updating package lists on {{ inventory_hostname }}
      apt:
        update_cache: yes

    # This task is equivalent to 'apt dist-upgrade', thus downloads and installs the new package versions
    - name: Running 'apt dist-upgrade' on {{ inventory_hostname }}
      apt:
        upgrade: dist

    # This uses the 'stat' module to see if /var/run/reboot-required exists. If it does, it'll register a variable called reboot_required
    - name: Checking if a reboot is required
      stat:
        path: /var/run/reboot-required
      register: reboot_required

    - name: Host needs a reboot to apply updates
      block:
        - shell: uname -r
          register: pre_kernel

        - name: Printing the kernel version pre-boot
          debug:
            var: pre_kernel.stdout

        # If we registered both the host shutdown and VMs shutdown, we will then reboot the host
        - name: Rebooted required and all VMs powered off, rebooting {{ inventory_hostname }}
          reboot:

        # Print the kernel version post-reboot
        - shell: uname -r
          register: post_kernel

        # Print the kernel version post-reboot
        - name: Printing the kernel version post reboot
          debug:
            var: post_kernel.stdout

      when: reboot_required.stat.exists == true
